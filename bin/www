#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('portfolio-api:server');
const http = require('http');
const { Server } = require("socket.io")

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const origin = process.env.NODE_ENV !== "production" ? 
  "http://localhost:3000" 
  : 
  "https://michaelacook.ca"

/**
 * Create a web sockets instance
 */
const io = new Server(server, {
  cors: {
    origin,
    methods: ["GET", "POST"],
    credentials: true,
  },
})

/**
 * Listen on the web sockets connection for a message event, then send it back to the client
 */
io.on("connection", (socket) => {
  socket.on("message", (message) => {
    io.emit(message)
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, console.log(`Server listening on port ${port}`));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
